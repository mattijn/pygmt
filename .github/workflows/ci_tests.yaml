# This workflow installs PyGMT dependencies, build documentation and run tests
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
  # Schedule daily tests
  schedule:
    - cron: '0 0 * * *'

jobs:
  style_check:
    name: Style Checks
    runs-on: ubuntu-latest

    steps:
      # Checkout current git repository
      - name: Checkout
        uses: actions/checkout@v2.3.1

      # Setup Miniconda
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install packages
        run: pip install black blackdoc docformatter flake8 pylint

      - name: Formatting check (black and flake8)
        run: make check

      - name: Linting (pylint)
        run: make lint

  test:
    name: ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    # environmental variables used in coverage
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
      # Cancel previous runs that are not completed
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      # Checkout current git repository
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          # fecth all history so that setuptools-scm works
          fetch-depth: 0

      # Setup Miniconda
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2.0.0
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          miniconda-version: "latest"

      # Install GMT and other required dependencies from conda-forge
      - name: Install GMT and required dependencies
        shell: bash -l {0}
        run: |
          requirements_file=full-conda-requirements.txt
          cat requirements.txt requirements-dev.txt > $requirements_file
          cat << EOF >> $requirements_file
          gmt=6.1.1
          make
          codecov
          EOF
          conda install --yes --file $requirements_file

      # Show installed pkg information for postmortem diagnostic
      - name: List installed packages
        shell: bash -l {0}
        run: conda list

      # Download cached remote files (artifacts) from GitHub
      - name: Download remote data from GitHub
        uses: dawidd6/action-download-artifact@v2.10.0
        with:
          workflow: cache_data.yaml
          workflow_conclusion: success
          name: gmt-cache
          path: .gmt

      # Move downloaded files to ~/.gmt directory and list them
      - name: Move and list downloaded remote files
        shell: bash -l {0}
        run: |
          mkdir -p ~/.gmt
          mv .gmt/* ~/.gmt
          ls -lh ~/.gmt

      # Install the package that we want to test
      - name: Install the package
        shell: bash -l {0}
        run: |
          python setup.py sdist --formats=zip
          pip install dist/*

      # Run the tests
      - name: Test with pytest
        shell: bash -l {0}
        run: make test PYTEST_EXTRA="-r P"

      # Upload diff images on test failure
      - name: Upload diff images if any test fails
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: artifact-${{ runner.os }}-${{ matrix.python-version }}
          path: tmp-test-dir-with-unique-name

      # Build the documentation
      - name: Build the documentation
        shell: bash -l {0}
        run: make -C doc clean all

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.10
        with:
          file: ./coverage.xml # optional
          env_vars: OS,PYTHON
          fail_ci_if_error: true
